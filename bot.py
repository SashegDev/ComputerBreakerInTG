import telebot
import time
import os
import json
from flask import Flask, request, jsonify
from threading import Thread
from telebot import types  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫
from commands import register_commands
from ping3 import ping  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ping –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ ping3

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config_path = os.path.join(os.path.dirname(__file__), "files/botFiles/config.json")
if not os.path.exists(config_path):
    with open(config_path, "w") as f:
        json.dump({"token": "YOUR_API_TOKEN", "admin": "YOUR_ADMIN_ID"}, f)

def read_config():
    with open(config_path, 'r') as f:
        config = json.load(f)
    return config['token'], config['admin']

# –ß—Ç–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
token, admin = read_config()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º
bot = telebot.TeleBot(token)

online_status = {}

def add_computer(ip):
    with open('files/botFiles/computer-list.txt', 'a') as f:
        f.write(ip + '\n')

def read_computer_list():
    if not os.path.exists('files/botFiles/computer-list.txt'):
        return []
    with open('files/botFiles/computer-list.txt', 'r') as f:
        return [line.strip() for line in f.readlines()]

def load_online_status():
    computers = read_computer_list()
    for ip in computers:
        online_status[ip] = time.time()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–∏–Ω–≥–∞

def update_ping(ip):
    online_status[ip] = time.time()  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∏–Ω–≥–∞
    if ip not in read_computer_list():
        add_computer(ip)

def check_online_status():
    current_time = time.time()
    online_computers = []
    for ip, last_ping in online_status.items():
        if current_time - last_ping <= 60:
            online_computers.append((ip, 'üü¢', last_ping))  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∏–Ω–≥–∞
        else:
            online_computers.append((ip, 'üî¥', last_ping))  # –û—Ñ—Ñ–ª–∞–π–Ω
    return online_computers

@bot.message_handler(commands=['ping'])
def get_online(message):
    online_computers = check_online_status()
    response = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–∏–Ω–≥–∞:\n"
    markup = types.InlineKeyboardMarkup()  # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

    for ip, status, last_ping in online_computers:
        button = types.InlineKeyboardButton(text=f"{ip} - {status}", callback_data=f"ping_{ip}")
        markup.add(button)

    bot.send_message(message.chat.id, response, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('ping_'))
def handle_ping(call):
    ip = call.data.split('_')[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º IP –∏–∑ callback_data
    response = f"–ü–∏–Ω–≥—É—é —Å–µ—Ä–≤–µ—Ä {ip}..."
    bot.send_message(call.message.chat.id, response)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–∏–Ω–≥–∞

    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∏–Ω–≥
    ping_time = ping(ip)
    if ping_time is not False:
        response = f"–°–µ—Ä–≤–µ—Ä {ip} –ø–∏–Ω–≥–æ–≤–∞–Ω: {ping_time * 1000:.2f} –º—Å."
        update_ping(ip)  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∏–Ω–≥–∞
    else:
        response = f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–∏–Ω–≥–æ–≤–∞—Ç—å —Å–µ—Ä–≤–µ—Ä {ip}. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."

    bot.answer_callback_query(call.id)  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
    bot.send_message(call.message.chat.id, response)

@bot.message_handler(commands=['pingall'])
def ping_all(message):
    response = "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–∏–Ω–≥–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤:\n\n"
    current_time = time.time()
    for ip in online_status.keys():
        ping_time = ping(ip)  # –ü–∏–Ω–≥—É–µ–º —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        status = 'üü¢' if ping_time is not False else 'üî¥'
        milliseconds = int(ping_time * 1000) if ping_time is not None else 0  # –í—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        response += f"{ip} - {status} - {milliseconds} –º—Å\n"
    bot.send_message(message.chat.id, response)

# Flask –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ POST –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–∏–Ω–≥–∞
@app.route('/', methods=['POST'])
def ping_route():
    data = request.json
    ip = data.get('ip')
    if ip:
        update_ping(ip)  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–∏–Ω–≥–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ IP
        return jsonify({"message": f"Ping updated for {ip}"}), 200
    else:
        return jsonify({"error": "IP address is required"}), 400

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
def start_bot():
    register_commands(bot)
    load_online_status()  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤
    bot.polling(none_stop=True)

if __name__ == "__main__":
    Thread(target=start_bot).start()
    app.run(host='0.0.0.0', port=5000)